{
	"info": {
		"_postman_id": "0f96a2a3-1ef5-466b-b702-6f0cb3af169a",
		"name": "[Local] api-testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10685937"
	},
	"item": [
		{
			"name": "Chained-testing",
			"item": [
				{
					"name": "[Create] New Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));\r",
									"\r",
									"let json = pm.response.json();\r",
									"pm.test(\"Produk berhasil ditambahkan\", () => {\r",
									"    pm.expect(json.message).to.include(\"berhasil\");\r",
									"});\r",
									"\r",
									"// Simpan ID ke variable\r",
									"pm.environment.set(\"produk_id\", json.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Ini Testing Product\",\r\n  \"price\": 75000000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Read] Check if the product created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"let json = pm.response.json();\r",
									"let found = json.find(p => p.name === \"Ini Testing Product\");\r",
									"pm.test(\"Produk berhasil ditemukan setelah create\", () => {\r",
									"    pm.expect(found).to.not.be.undefined;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/read",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"read"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Update] Update the product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));\r",
									"\r",
									"let json = pm.response.json();\r",
									"pm.test(\"Produk berhasil diupdate\", () => {\r",
									"    pm.expect(json.message).to.include(\"berhasil\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{produk_id}},\r\n    \"name\": \"Ini Testing Update\",\r\n    \"price\": 12000000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Read] Check if the product updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"let json = pm.response.json();\r",
									"let found = json.find(p => p.name === \"Ini Testing Update\");\r",
									"pm.test(\"Produk berhasil ditemukan setelah create\", () => {\r",
									"    pm.expect(found).to.not.be.undefined;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/read",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"read"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Delete] Delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));\r",
									"\r",
									"let json = pm.response.json();\r",
									"pm.test(\"Product berhasil dihapus\", () => {\r",
									"    pm.expect(json.message).to.include(\"berhasil\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{produk_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Read] Check if the product deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"let json = pm.response.json();\r",
									"let found = json.find(p => p.id == pm.environment.get(\"produk_id\"));\r",
									"pm.test(\"Produk tidak ditemukan setelah delete\", () => {\r",
									"    pm.expect(found).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/read",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"read"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Xenia 2023\",\r\n  \"price\": 75000000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/read",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"read"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 2,\r\n    \"name\": \"Apple iPhone 13\",\r\n    \"price\": \"12000000\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/update",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/delete",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"delete"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost/api-testing/api",
			"type": "string"
		},
		{
			"key": "token",
			"value": "1234567890ABCDEF",
			"type": "string"
		}
	]
}